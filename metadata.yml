rules:
  - apiGroups: [""]
    apiVersions: ["v1"]
    resources: ["deployments"]
    operations: ["CREATE"]
mutating: false
contextAware: false
executionMode: kubewarden-wapc
# Consider the policy for the background audit scans. Default is true. Note the
# intrinsic limitations of the background audit feature on docs.kubewarden.io;
# If your policy hits any limitations, set to false for the audit feature to
# skip this policy and not generate false positives.
backgroundAudit: true
annotations:
  # artifacthub specific:
  io.artifacthub.displayName: Container Command Control
  io.artifacthub.resources: Deployment
  io.artifacthub.keywords: Deployment, container, command, args, kubewarden
  io.kubewarden.policy.ociUrl: ghcr.io/vvlisn/policies/container-command-control # must match release workflow oci-target
  # kubewarden specific:
  io.kubewarden.policy.title: container-command-control
  io.kubewarden.policy.version: 0.0.1
  io.kubewarden.policy.description: A policy that controls the use of container args and command in Kubernetes Deployments. By default, it denies any container configuration that includes args or command fields, but can be configured to allow them.
  io.kubewarden.policy.author: "vvlisn <vvlisn@719@gmail.com>"
  io.kubewarden.policy.url: https://github.com/vvlisn/container-command-control
  io.kubewarden.policy.source: https://github.com/vvlisn/container-command-control
  io.kubewarden.policy.license: Apache-2.0
  # The next two annotations are used in the policy report generated by the
  # Audit scanner. Severity indicates policy check result criticality and
  # Category indicates policy category. See more here at docs.kubewarden.io
  io.kubewarden.policy.severity: medium # one of info, low, medium, high, critical. See docs.
  io.kubewarden.policy.category: Resource validation